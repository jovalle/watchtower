---
services:
  docker-socket-proxy:
    container_name: proxy
    environment:
      - CONTAINERS=1
      - POST=0
      - SERVICES=1
      - TASKS=1
    image: ghcr.io/tecnativa/docker-socket-proxy
    ports:
      - 0.0.0.0:2375:2375
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  jellyfin:
    container_name: jellyfin
    devices:
      - /dev/dri
    env_file: .env
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.${DOMAIN}
    extra_hosts:
      - host.docker.internal:host-gateway
    image: jellyfin/jellyfin
    labels:
      - homepage.description=Media Server
      - homepage.group=Media
      - homepage.href=https://jellyfin.watchtower.${DOMAIN}
      - homepage.icon=jellyfin
      - homepage.name=Jellyfin
      - homepage.widget.enablbeNowPlaying=true
      - homepage.widget.key=${JELLYFIN_API_KEY}
      - homepage.widget.streamOneStreamToTwoRows=true
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://watchtower:8096
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=host(`jellyfin.${DOMAIN}`)
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    network_mode: host
    restart: unless-stopped
    volumes:
      - /var/lib/watchtower/jellyfin:/config
      - ${MISC_PATH:-/var/lib/watchtower/misc}:/data/misc
      - ${MOVIES_PATH:-/var/lib/watchtower/movies}:/data/movies
      - ${TRANSCODE_PATH:-/dev/shm}:/transcode
      - ${TVSHOWS_PATH:-/var/lib/watchtower/tvshows}:/data/tvshows
  node-exporter:
    command: --path.rootfs=/host
    container_name: node-exporter
    image: quay.io/prometheus/node-exporter
    ports:
      - 9100:9100
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
  plex:
    container_name: plex
    devices:
      - /dev/dri
    env_file: .env
    environment:
      - ADVERTISE_IP=http://${HOST_IP:?host ip required}:32400/
      - PLEX_CLAIM=${PLEX_CLAIM:-claim-1234}
      - PLEX_GID=${PGID:-1000}
      - PLEX_UID=${PUID:-1000}
      - UMASK_SET=022
      - VERSION=plexpass
    hostname: watchtower
    image: plexinc/pms-docker:plexpass
    labels:
      - homepage.group=Watchtower
      - homepage.name=Plex
      - homepage.icon=plex
      - homepage.href=https://plex.${DOMAIN}
      - homepage.description=Media Server
      - homepage.widget.type=plex
      - homepage.widget.url=http://watchtower:32400
      - homepage.widget.key=${PLEX_API_KEY}
      - homepage.widget.fields=["streams", "movies", "tv", "albums"]
      - traefik.enable=true
      - traefik.http.routers.plex.rule=host(`plex.${DOMAIN}`)
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - traefik.http.services.plex.loadbalancer.server.url=http://127.0.0.1:32400
    network_mode: host
    restart: unless-stopped
    volumes:
      - ${CONFIG_PATH:-/var/lib/watchtower/plex}:/config
      - ${MISC_PATH:-/var/lib/watchtower/misc}:/data/misc
      - ${MOVIES_PATH:-/var/lib/watchtower/movies}:/data/movies
      - ${MUSIC_PATH:-/var/lib/watchtower/music}:/data/music
      - ${TRANSCODE_PATH:-/var/lib/watchtower/transcode}:/transcode
      - ${TVSHOWS_PATH:-/var/lib/watchtower/tvshows}:/data/tvshows
  portainer:
    command: -H unix:///var/run/docker.sock
    container_name: portainer
    env_file: .env
    image: portainer/portainer-ce
    labels:
      - homepage.group=Watchtower
      - homepage.name=Portainer
      - homepage.icon=portainer
      - homepage.href=https://portainer.watchtower.${DOMAIN}
      - homepage.description=Container management
      - homepage.widget.type=portainer
      - homepage.widget.env=1
      - homepage.widget.url=http://watchtower:9000
      - homepage.widget.key=${PORTAINER_API_KEY}
      - homepage.widget.fields=["running", "stopped", "total"]
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.watchtower.${DOMAIN}`)
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    ports:
      - 9000:9000
    restart: unless-stopped
    volumes:
      - /var/lib/watchtower/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
  traefik:
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main=${DOMAIN}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.watchtower.${DOMAIN},*.${DOMAIN}
      - --log.level=DEBUG
      - --providers.docker.exposedbydefault=true
      - --providers.docker=true
      - --serverstransport.insecureskipverify=true
    container_name: traefik
    env_file: .env
    extra_hosts:
      - host.docker.internal:172.17.0.1
    image: traefik
    labels:
      - homepage.group=Watchtower
      - homepage.name=Traefik
      - homepage.icon=traefik
      - homepage.href=https://traefik.watchtower.${DOMAIN}
      - homepage.description=Reverse proxy for exposing apps via HTTPS
      - homepage.widget.type=traefik
      - homepage.widget.url=http://watchtower:8080
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`traefik.watchtower.${DOMAIN}`)
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.routers.dashboard.service=api@internal
    networks:
      default: {}
    ports:
      - 80:80
      - 8080:8080
      - 443:443
    restart: unless-stopped
    volumes:
      - /var/lib/watchtower/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
  watchtowerr:
    container_name: watchtowerr
    env_file: .env
    environment:
      WATCHTOWER_SCHEDULE: "0 0 4 * * *"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_DEBUG: "true"
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
